// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: steamnetworkingsockets_messages_udp.proto
// Protobuf Java Version: 4.28.2

package com.nickbooher.protos.gc.dota;

public final class MsgSteamNetworkingSocketsUDP {
  private MsgSteamNetworkingSocketsUDP() {}
  static {
    com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
      com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
      /* major= */ 4,
      /* minor= */ 28,
      /* patch= */ 2,
      /* suffix= */ "",
      MsgSteamNetworkingSocketsUDP.class.getName());
  }
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code dota2.ESteamNetworkingUDPMsgID}
   */
  public enum ESteamNetworkingUDPMsgID
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeRequest = 32;</code>
     */
    k_ESteamNetworkingUDPMsg_ChallengeRequest(32),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeReply = 33;</code>
     */
    k_ESteamNetworkingUDPMsg_ChallengeReply(33),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectRequest = 34;</code>
     */
    k_ESteamNetworkingUDPMsg_ConnectRequest(34),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectOK = 35;</code>
     */
    k_ESteamNetworkingUDPMsg_ConnectOK(35),
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectionClosed = 36;</code>
     */
    k_ESteamNetworkingUDPMsg_ConnectionClosed(36),
    /**
     * <code>k_ESteamNetworkingUDPMsg_NoConnection = 37;</code>
     */
    k_ESteamNetworkingUDPMsg_NoConnection(37),
    ;

    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        ESteamNetworkingUDPMsgID.class.getName());
    }
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeRequest = 32;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ChallengeRequest_VALUE = 32;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ChallengeReply = 33;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ChallengeReply_VALUE = 33;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectRequest = 34;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ConnectRequest_VALUE = 34;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectOK = 35;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ConnectOK_VALUE = 35;
    /**
     * <code>k_ESteamNetworkingUDPMsg_ConnectionClosed = 36;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_ConnectionClosed_VALUE = 36;
    /**
     * <code>k_ESteamNetworkingUDPMsg_NoConnection = 37;</code>
     */
    public static final int k_ESteamNetworkingUDPMsg_NoConnection_VALUE = 37;


    public final int getNumber() {
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static ESteamNetworkingUDPMsgID valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static ESteamNetworkingUDPMsgID forNumber(int value) {
      switch (value) {
        case 32: return k_ESteamNetworkingUDPMsg_ChallengeRequest;
        case 33: return k_ESteamNetworkingUDPMsg_ChallengeReply;
        case 34: return k_ESteamNetworkingUDPMsg_ConnectRequest;
        case 35: return k_ESteamNetworkingUDPMsg_ConnectOK;
        case 36: return k_ESteamNetworkingUDPMsg_ConnectionClosed;
        case 37: return k_ESteamNetworkingUDPMsg_NoConnection;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<ESteamNetworkingUDPMsgID>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        ESteamNetworkingUDPMsgID> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<ESteamNetworkingUDPMsgID>() {
            public ESteamNetworkingUDPMsgID findValueByNumber(int number) {
              return ESteamNetworkingUDPMsgID.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.getDescriptor().getEnumTypes().get(0);
    }

    private static final ESteamNetworkingUDPMsgID[] VALUES = values();

    public static ESteamNetworkingUDPMsgID valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private ESteamNetworkingUDPMsgID(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:dota2.ESteamNetworkingUDPMsgID)
  }

  public interface CMsgSteamSockets_UDP_ChallengeRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_ChallengeRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return Whether the connectionId field is set.
     */
    boolean hasConnectionId();
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return The connectionId.
     */
    int getConnectionId();

    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     * @return Whether the myTimestamp field is set.
     */
    boolean hasMyTimestamp();
    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     * @return The myTimestamp.
     */
    long getMyTimestamp();

    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return Whether the protocolVersion field is set.
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return The protocolVersion.
     */
    int getProtocolVersion();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ChallengeRequest}
   */
  public static final class CMsgSteamSockets_UDP_ChallengeRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_ChallengeRequest)
      CMsgSteamSockets_UDP_ChallengeRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_ChallengeRequest.class.getName());
    }
    // Use CMsgSteamSockets_UDP_ChallengeRequest.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ChallengeRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ChallengeRequest() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.Builder.class);
    }

    private int bitField0_;
    public static final int CONNECTION_ID_FIELD_NUMBER = 1;
    private int connectionId_ = 0;
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return Whether the connectionId field is set.
     */
    @java.lang.Override
    public boolean hasConnectionId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return The connectionId.
     */
    @java.lang.Override
    public int getConnectionId() {
      return connectionId_;
    }

    public static final int MY_TIMESTAMP_FIELD_NUMBER = 3;
    private long myTimestamp_ = 0L;
    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     * @return Whether the myTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasMyTimestamp() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional fixed64 my_timestamp = 3;</code>
     * @return The myTimestamp.
     */
    @java.lang.Override
    public long getMyTimestamp() {
      return myTimestamp_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 4;
    private int protocolVersion_ = 0;
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return Whether the protocolVersion field is set.
     */
    @java.lang.Override
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return The protocolVersion.
     */
    @java.lang.Override
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFixed32(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFixed64(3, myTimestamp_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeUInt32(4, protocolVersion_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, myTimestamp_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, protocolVersion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest) obj;

      if (hasConnectionId() != other.hasConnectionId()) return false;
      if (hasConnectionId()) {
        if (getConnectionId()
            != other.getConnectionId()) return false;
      }
      if (hasMyTimestamp() != other.hasMyTimestamp()) return false;
      if (hasMyTimestamp()) {
        if (getMyTimestamp()
            != other.getMyTimestamp()) return false;
      }
      if (hasProtocolVersion() != other.hasProtocolVersion()) return false;
      if (hasProtocolVersion()) {
        if (getProtocolVersion()
            != other.getProtocolVersion()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConnectionId()) {
        hash = (37 * hash) + CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getConnectionId();
      }
      if (hasMyTimestamp()) {
        hash = (37 * hash) + MY_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMyTimestamp());
      }
      if (hasProtocolVersion()) {
        hash = (37 * hash) + PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolVersion();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ChallengeRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_ChallengeRequest)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        connectionId_ = 0;
        myTimestamp_ = 0L;
        protocolVersion_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.connectionId_ = connectionId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.myTimestamp_ = myTimestamp_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.protocolVersion_ = protocolVersion_;
          to_bitField0_ |= 0x00000004;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest.getDefaultInstance()) return this;
        if (other.hasConnectionId()) {
          setConnectionId(other.getConnectionId());
        }
        if (other.hasMyTimestamp()) {
          setMyTimestamp(other.getMyTimestamp());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {
                connectionId_ = input.readFixed32();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
              case 25: {
                myTimestamp_ = input.readFixed64();
                bitField0_ |= 0x00000002;
                break;
              } // case 25
              case 32: {
                protocolVersion_ = input.readUInt32();
                bitField0_ |= 0x00000004;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int connectionId_ ;
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @return Whether the connectionId field is set.
       */
      @java.lang.Override
      public boolean hasConnectionId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @return The connectionId.
       */
      @java.lang.Override
      public int getConnectionId() {
        return connectionId_;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @param value The connectionId to set.
       * @return This builder for chaining.
       */
      public Builder setConnectionId(int value) {

        connectionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        connectionId_ = 0;
        onChanged();
        return this;
      }

      private long myTimestamp_ ;
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       * @return Whether the myTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasMyTimestamp() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       * @return The myTimestamp.
       */
      @java.lang.Override
      public long getMyTimestamp() {
        return myTimestamp_;
      }
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       * @param value The myTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setMyTimestamp(long value) {

        myTimestamp_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 my_timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearMyTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000002);
        myTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @return Whether the protocolVersion field is set.
       */
      @java.lang.Override
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @return The protocolVersion.
       */
      @java.lang.Override
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @param value The protocolVersion to set.
       * @return This builder for chaining.
       */
      public Builder setProtocolVersion(int value) {

        protocolVersion_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000004);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_ChallengeRequest)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_ChallengeRequest)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeRequest>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ChallengeRequest>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ChallengeRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ChallengeReplyOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_ChallengeReply)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return Whether the connectionId field is set.
     */
    boolean hasConnectionId();
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return The connectionId.
     */
    int getConnectionId();

    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return Whether the challenge field is set.
     */
    boolean hasChallenge();
    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return The challenge.
     */
    long getChallenge();

    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return Whether the yourTimestamp field is set.
     */
    boolean hasYourTimestamp();
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return The yourTimestamp.
     */
    long getYourTimestamp();

    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return Whether the protocolVersion field is set.
     */
    boolean hasProtocolVersion();
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return The protocolVersion.
     */
    int getProtocolVersion();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ChallengeReply}
   */
  public static final class CMsgSteamSockets_UDP_ChallengeReply extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_ChallengeReply)
      CMsgSteamSockets_UDP_ChallengeReplyOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_ChallengeReply.class.getName());
    }
    // Use CMsgSteamSockets_UDP_ChallengeReply.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ChallengeReply(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ChallengeReply() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.Builder.class);
    }

    private int bitField0_;
    public static final int CONNECTION_ID_FIELD_NUMBER = 1;
    private int connectionId_ = 0;
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return Whether the connectionId field is set.
     */
    @java.lang.Override
    public boolean hasConnectionId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional fixed32 connection_id = 1;</code>
     * @return The connectionId.
     */
    @java.lang.Override
    public int getConnectionId() {
      return connectionId_;
    }

    public static final int CHALLENGE_FIELD_NUMBER = 2;
    private long challenge_ = 0L;
    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return Whether the challenge field is set.
     */
    @java.lang.Override
    public boolean hasChallenge() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return The challenge.
     */
    @java.lang.Override
    public long getChallenge() {
      return challenge_;
    }

    public static final int YOUR_TIMESTAMP_FIELD_NUMBER = 3;
    private long yourTimestamp_ = 0L;
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return Whether the yourTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasYourTimestamp() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return The yourTimestamp.
     */
    @java.lang.Override
    public long getYourTimestamp() {
      return yourTimestamp_;
    }

    public static final int PROTOCOL_VERSION_FIELD_NUMBER = 4;
    private int protocolVersion_ = 0;
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return Whether the protocolVersion field is set.
     */
    @java.lang.Override
    public boolean hasProtocolVersion() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional uint32 protocol_version = 4;</code>
     * @return The protocolVersion.
     */
    @java.lang.Override
    public int getProtocolVersion() {
      return protocolVersion_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFixed32(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFixed64(2, challenge_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeFixed64(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(4, protocolVersion_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, connectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, challenge_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, protocolVersion_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply) obj;

      if (hasConnectionId() != other.hasConnectionId()) return false;
      if (hasConnectionId()) {
        if (getConnectionId()
            != other.getConnectionId()) return false;
      }
      if (hasChallenge() != other.hasChallenge()) return false;
      if (hasChallenge()) {
        if (getChallenge()
            != other.getChallenge()) return false;
      }
      if (hasYourTimestamp() != other.hasYourTimestamp()) return false;
      if (hasYourTimestamp()) {
        if (getYourTimestamp()
            != other.getYourTimestamp()) return false;
      }
      if (hasProtocolVersion() != other.hasProtocolVersion()) return false;
      if (hasProtocolVersion()) {
        if (getProtocolVersion()
            != other.getProtocolVersion()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasConnectionId()) {
        hash = (37 * hash) + CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getConnectionId();
      }
      if (hasChallenge()) {
        hash = (37 * hash) + CHALLENGE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getChallenge());
      }
      if (hasYourTimestamp()) {
        hash = (37 * hash) + YOUR_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getYourTimestamp());
      }
      if (hasProtocolVersion()) {
        hash = (37 * hash) + PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getProtocolVersion();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ChallengeReply}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_ChallengeReply)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReplyOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        connectionId_ = 0;
        challenge_ = 0L;
        yourTimestamp_ = 0L;
        protocolVersion_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.connectionId_ = connectionId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.challenge_ = challenge_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.yourTimestamp_ = yourTimestamp_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.protocolVersion_ = protocolVersion_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply.getDefaultInstance()) return this;
        if (other.hasConnectionId()) {
          setConnectionId(other.getConnectionId());
        }
        if (other.hasChallenge()) {
          setChallenge(other.getChallenge());
        }
        if (other.hasYourTimestamp()) {
          setYourTimestamp(other.getYourTimestamp());
        }
        if (other.hasProtocolVersion()) {
          setProtocolVersion(other.getProtocolVersion());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {
                connectionId_ = input.readFixed32();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
              case 17: {
                challenge_ = input.readFixed64();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                yourTimestamp_ = input.readFixed64();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 32: {
                protocolVersion_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int connectionId_ ;
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @return Whether the connectionId field is set.
       */
      @java.lang.Override
      public boolean hasConnectionId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @return The connectionId.
       */
      @java.lang.Override
      public int getConnectionId() {
        return connectionId_;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @param value The connectionId to set.
       * @return This builder for chaining.
       */
      public Builder setConnectionId(int value) {

        connectionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 connection_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        connectionId_ = 0;
        onChanged();
        return this;
      }

      private long challenge_ ;
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @return Whether the challenge field is set.
       */
      @java.lang.Override
      public boolean hasChallenge() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @return The challenge.
       */
      @java.lang.Override
      public long getChallenge() {
        return challenge_;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @param value The challenge to set.
       * @return This builder for chaining.
       */
      public Builder setChallenge(long value) {

        challenge_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChallenge() {
        bitField0_ = (bitField0_ & ~0x00000002);
        challenge_ = 0L;
        onChanged();
        return this;
      }

      private long yourTimestamp_ ;
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @return Whether the yourTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasYourTimestamp() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @return The yourTimestamp.
       */
      @java.lang.Override
      public long getYourTimestamp() {
        return yourTimestamp_;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @param value The yourTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setYourTimestamp(long value) {

        yourTimestamp_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearYourTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yourTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int protocolVersion_ ;
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @return Whether the protocolVersion field is set.
       */
      @java.lang.Override
      public boolean hasProtocolVersion() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @return The protocolVersion.
       */
      @java.lang.Override
      public int getProtocolVersion() {
        return protocolVersion_;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @param value The protocolVersion to set.
       * @return This builder for chaining.
       */
      public Builder setProtocolVersion(int value) {

        protocolVersion_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 protocol_version = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000008);
        protocolVersion_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_ChallengeReply)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_ChallengeReply)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeReply>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ChallengeReply>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ChallengeReply parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeReply> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ChallengeReply> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ChallengeReply getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ConnectRequestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_ConnectRequest)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return Whether the clientConnectionId field is set.
     */
    boolean hasClientConnectionId();
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return The clientConnectionId.
     */
    int getClientConnectionId();

    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return Whether the challenge field is set.
     */
    boolean hasChallenge();
    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return The challenge.
     */
    long getChallenge();

    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     * @return Whether the myTimestamp field is set.
     */
    boolean hasMyTimestamp();
    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     * @return The myTimestamp.
     */
    long getMyTimestamp();

    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     * @return Whether the pingEstMs field is set.
     */
    boolean hasPingEstMs();
    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     * @return The pingEstMs.
     */
    int getPingEstMs();

    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return Whether the crypt field is set.
     */
    boolean hasCrypt();
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return The crypt.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned getCrypt();
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder();

    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
     * @return Whether the cert field is set.
     */
    boolean hasCert();
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
     * @return The cert.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned getCert();
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder();

    /**
     * <code>optional uint32 legacy_protocol_version = 8;</code>
     * @return Whether the legacyProtocolVersion field is set.
     */
    boolean hasLegacyProtocolVersion();
    /**
     * <code>optional uint32 legacy_protocol_version = 8;</code>
     * @return The legacyProtocolVersion.
     */
    int getLegacyProtocolVersion();

    /**
     * <code>optional string identity_string = 10;</code>
     * @return Whether the identityString field is set.
     */
    boolean hasIdentityString();
    /**
     * <code>optional string identity_string = 10;</code>
     * @return The identityString.
     */
    java.lang.String getIdentityString();
    /**
     * <code>optional string identity_string = 10;</code>
     * @return The bytes for identityString.
     */
    com.google.protobuf.ByteString
        getIdentityStringBytes();

    /**
     * <code>optional fixed64 legacy_client_steam_id = 3;</code>
     * @return Whether the legacyClientSteamId field is set.
     */
    boolean hasLegacyClientSteamId();
    /**
     * <code>optional fixed64 legacy_client_steam_id = 3;</code>
     * @return The legacyClientSteamId.
     */
    long getLegacyClientSteamId();

    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
     * @return Whether the legacyIdentityBinary field is set.
     */
    boolean hasLegacyIdentityBinary();
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
     * @return The legacyIdentityBinary.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary getLegacyIdentityBinary();
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder getLegacyIdentityBinaryOrBuilder();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ConnectRequest}
   */
  public static final class CMsgSteamSockets_UDP_ConnectRequest extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_ConnectRequest)
      CMsgSteamSockets_UDP_ConnectRequestOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_ConnectRequest.class.getName());
    }
    // Use CMsgSteamSockets_UDP_ConnectRequest.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ConnectRequest(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ConnectRequest() {
      identityString_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.Builder.class);
    }

    private int bitField0_;
    public static final int CLIENT_CONNECTION_ID_FIELD_NUMBER = 1;
    private int clientConnectionId_ = 0;
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return Whether the clientConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasClientConnectionId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return The clientConnectionId.
     */
    @java.lang.Override
    public int getClientConnectionId() {
      return clientConnectionId_;
    }

    public static final int CHALLENGE_FIELD_NUMBER = 2;
    private long challenge_ = 0L;
    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return Whether the challenge field is set.
     */
    @java.lang.Override
    public boolean hasChallenge() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional fixed64 challenge = 2;</code>
     * @return The challenge.
     */
    @java.lang.Override
    public long getChallenge() {
      return challenge_;
    }

    public static final int MY_TIMESTAMP_FIELD_NUMBER = 5;
    private long myTimestamp_ = 0L;
    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     * @return Whether the myTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasMyTimestamp() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional fixed64 my_timestamp = 5;</code>
     * @return The myTimestamp.
     */
    @java.lang.Override
    public long getMyTimestamp() {
      return myTimestamp_;
    }

    public static final int PING_EST_MS_FIELD_NUMBER = 6;
    private int pingEstMs_ = 0;
    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     * @return Whether the pingEstMs field is set.
     */
    @java.lang.Override
    public boolean hasPingEstMs() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional uint32 ping_est_ms = 6;</code>
     * @return The pingEstMs.
     */
    @java.lang.Override
    public int getPingEstMs() {
      return pingEstMs_;
    }

    public static final int CRYPT_FIELD_NUMBER = 7;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned crypt_;
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return Whether the crypt field is set.
     */
    @java.lang.Override
    public boolean hasCrypt() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return The crypt.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
      return crypt_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
      return crypt_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }

    public static final int CERT_FIELD_NUMBER = 4;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned cert_;
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
     * @return Whether the cert field is set.
     */
    @java.lang.Override
    public boolean hasCert() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
     * @return The cert.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned getCert() {
      return cert_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
      return cert_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }

    public static final int LEGACY_PROTOCOL_VERSION_FIELD_NUMBER = 8;
    private int legacyProtocolVersion_ = 0;
    /**
     * <code>optional uint32 legacy_protocol_version = 8;</code>
     * @return Whether the legacyProtocolVersion field is set.
     */
    @java.lang.Override
    public boolean hasLegacyProtocolVersion() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional uint32 legacy_protocol_version = 8;</code>
     * @return The legacyProtocolVersion.
     */
    @java.lang.Override
    public int getLegacyProtocolVersion() {
      return legacyProtocolVersion_;
    }

    public static final int IDENTITY_STRING_FIELD_NUMBER = 10;
    @SuppressWarnings("serial")
    private volatile java.lang.Object identityString_ = "";
    /**
     * <code>optional string identity_string = 10;</code>
     * @return Whether the identityString field is set.
     */
    @java.lang.Override
    public boolean hasIdentityString() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional string identity_string = 10;</code>
     * @return The identityString.
     */
    @java.lang.Override
    public java.lang.String getIdentityString() {
      java.lang.Object ref = identityString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          identityString_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string identity_string = 10;</code>
     * @return The bytes for identityString.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdentityStringBytes() {
      java.lang.Object ref = identityString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        identityString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LEGACY_CLIENT_STEAM_ID_FIELD_NUMBER = 3;
    private long legacyClientSteamId_ = 0L;
    /**
     * <code>optional fixed64 legacy_client_steam_id = 3;</code>
     * @return Whether the legacyClientSteamId field is set.
     */
    @java.lang.Override
    public boolean hasLegacyClientSteamId() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional fixed64 legacy_client_steam_id = 3;</code>
     * @return The legacyClientSteamId.
     */
    @java.lang.Override
    public long getLegacyClientSteamId() {
      return legacyClientSteamId_;
    }

    public static final int LEGACY_IDENTITY_BINARY_FIELD_NUMBER = 9;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary legacyIdentityBinary_;
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
     * @return Whether the legacyIdentityBinary field is set.
     */
    @java.lang.Override
    public boolean hasLegacyIdentityBinary() {
      return ((bitField0_ & 0x00000200) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
     * @return The legacyIdentityBinary.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary getLegacyIdentityBinary() {
      return legacyIdentityBinary_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
    }
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder getLegacyIdentityBinaryOrBuilder() {
      return legacyIdentityBinary_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFixed32(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFixed64(2, challenge_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeFixed64(3, legacyClientSteamId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(4, getCert());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeFixed64(5, myTimestamp_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(6, pingEstMs_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(7, getCrypt());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        output.writeUInt32(8, legacyProtocolVersion_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        output.writeMessage(9, getLegacyIdentityBinary());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 10, identityString_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, challenge_);
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, legacyClientSteamId_);
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, getCert());
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(5, myTimestamp_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, pingEstMs_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getCrypt());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(8, legacyProtocolVersion_);
      }
      if (((bitField0_ & 0x00000200) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(9, getLegacyIdentityBinary());
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(10, identityString_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest) obj;

      if (hasClientConnectionId() != other.hasClientConnectionId()) return false;
      if (hasClientConnectionId()) {
        if (getClientConnectionId()
            != other.getClientConnectionId()) return false;
      }
      if (hasChallenge() != other.hasChallenge()) return false;
      if (hasChallenge()) {
        if (getChallenge()
            != other.getChallenge()) return false;
      }
      if (hasMyTimestamp() != other.hasMyTimestamp()) return false;
      if (hasMyTimestamp()) {
        if (getMyTimestamp()
            != other.getMyTimestamp()) return false;
      }
      if (hasPingEstMs() != other.hasPingEstMs()) return false;
      if (hasPingEstMs()) {
        if (getPingEstMs()
            != other.getPingEstMs()) return false;
      }
      if (hasCrypt() != other.hasCrypt()) return false;
      if (hasCrypt()) {
        if (!getCrypt()
            .equals(other.getCrypt())) return false;
      }
      if (hasCert() != other.hasCert()) return false;
      if (hasCert()) {
        if (!getCert()
            .equals(other.getCert())) return false;
      }
      if (hasLegacyProtocolVersion() != other.hasLegacyProtocolVersion()) return false;
      if (hasLegacyProtocolVersion()) {
        if (getLegacyProtocolVersion()
            != other.getLegacyProtocolVersion()) return false;
      }
      if (hasIdentityString() != other.hasIdentityString()) return false;
      if (hasIdentityString()) {
        if (!getIdentityString()
            .equals(other.getIdentityString())) return false;
      }
      if (hasLegacyClientSteamId() != other.hasLegacyClientSteamId()) return false;
      if (hasLegacyClientSteamId()) {
        if (getLegacyClientSteamId()
            != other.getLegacyClientSteamId()) return false;
      }
      if (hasLegacyIdentityBinary() != other.hasLegacyIdentityBinary()) return false;
      if (hasLegacyIdentityBinary()) {
        if (!getLegacyIdentityBinary()
            .equals(other.getLegacyIdentityBinary())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClientConnectionId()) {
        hash = (37 * hash) + CLIENT_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getClientConnectionId();
      }
      if (hasChallenge()) {
        hash = (37 * hash) + CHALLENGE_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getChallenge());
      }
      if (hasMyTimestamp()) {
        hash = (37 * hash) + MY_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getMyTimestamp());
      }
      if (hasPingEstMs()) {
        hash = (37 * hash) + PING_EST_MS_FIELD_NUMBER;
        hash = (53 * hash) + getPingEstMs();
      }
      if (hasCrypt()) {
        hash = (37 * hash) + CRYPT_FIELD_NUMBER;
        hash = (53 * hash) + getCrypt().hashCode();
      }
      if (hasCert()) {
        hash = (37 * hash) + CERT_FIELD_NUMBER;
        hash = (53 * hash) + getCert().hashCode();
      }
      if (hasLegacyProtocolVersion()) {
        hash = (37 * hash) + LEGACY_PROTOCOL_VERSION_FIELD_NUMBER;
        hash = (53 * hash) + getLegacyProtocolVersion();
      }
      if (hasIdentityString()) {
        hash = (37 * hash) + IDENTITY_STRING_FIELD_NUMBER;
        hash = (53 * hash) + getIdentityString().hashCode();
      }
      if (hasLegacyClientSteamId()) {
        hash = (37 * hash) + LEGACY_CLIENT_STEAM_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLegacyClientSteamId());
      }
      if (hasLegacyIdentityBinary()) {
        hash = (37 * hash) + LEGACY_IDENTITY_BINARY_FIELD_NUMBER;
        hash = (53 * hash) + getLegacyIdentityBinary().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ConnectRequest}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_ConnectRequest)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getCryptFieldBuilder();
          getCertFieldBuilder();
          getLegacyIdentityBinaryFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        clientConnectionId_ = 0;
        challenge_ = 0L;
        myTimestamp_ = 0L;
        pingEstMs_ = 0;
        crypt_ = null;
        if (cryptBuilder_ != null) {
          cryptBuilder_.dispose();
          cryptBuilder_ = null;
        }
        cert_ = null;
        if (certBuilder_ != null) {
          certBuilder_.dispose();
          certBuilder_ = null;
        }
        legacyProtocolVersion_ = 0;
        identityString_ = "";
        legacyClientSteamId_ = 0L;
        legacyIdentityBinary_ = null;
        if (legacyIdentityBinaryBuilder_ != null) {
          legacyIdentityBinaryBuilder_.dispose();
          legacyIdentityBinaryBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.clientConnectionId_ = clientConnectionId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.challenge_ = challenge_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.myTimestamp_ = myTimestamp_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.pingEstMs_ = pingEstMs_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.crypt_ = cryptBuilder_ == null
              ? crypt_
              : cryptBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.cert_ = certBuilder_ == null
              ? cert_
              : certBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.legacyProtocolVersion_ = legacyProtocolVersion_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.identityString_ = identityString_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.legacyClientSteamId_ = legacyClientSteamId_;
          to_bitField0_ |= 0x00000100;
        }
        if (((from_bitField0_ & 0x00000200) != 0)) {
          result.legacyIdentityBinary_ = legacyIdentityBinaryBuilder_ == null
              ? legacyIdentityBinary_
              : legacyIdentityBinaryBuilder_.build();
          to_bitField0_ |= 0x00000200;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest.getDefaultInstance()) return this;
        if (other.hasClientConnectionId()) {
          setClientConnectionId(other.getClientConnectionId());
        }
        if (other.hasChallenge()) {
          setChallenge(other.getChallenge());
        }
        if (other.hasMyTimestamp()) {
          setMyTimestamp(other.getMyTimestamp());
        }
        if (other.hasPingEstMs()) {
          setPingEstMs(other.getPingEstMs());
        }
        if (other.hasCrypt()) {
          mergeCrypt(other.getCrypt());
        }
        if (other.hasCert()) {
          mergeCert(other.getCert());
        }
        if (other.hasLegacyProtocolVersion()) {
          setLegacyProtocolVersion(other.getLegacyProtocolVersion());
        }
        if (other.hasIdentityString()) {
          identityString_ = other.identityString_;
          bitField0_ |= 0x00000080;
          onChanged();
        }
        if (other.hasLegacyClientSteamId()) {
          setLegacyClientSteamId(other.getLegacyClientSteamId());
        }
        if (other.hasLegacyIdentityBinary()) {
          mergeLegacyIdentityBinary(other.getLegacyIdentityBinary());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {
                clientConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
              case 17: {
                challenge_ = input.readFixed64();
                bitField0_ |= 0x00000002;
                break;
              } // case 17
              case 25: {
                legacyClientSteamId_ = input.readFixed64();
                bitField0_ |= 0x00000100;
                break;
              } // case 25
              case 34: {
                input.readMessage(
                    getCertFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 34
              case 41: {
                myTimestamp_ = input.readFixed64();
                bitField0_ |= 0x00000004;
                break;
              } // case 41
              case 48: {
                pingEstMs_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 48
              case 58: {
                input.readMessage(
                    getCryptFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 58
              case 64: {
                legacyProtocolVersion_ = input.readUInt32();
                bitField0_ |= 0x00000040;
                break;
              } // case 64
              case 74: {
                input.readMessage(
                    getLegacyIdentityBinaryFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000200;
                break;
              } // case 74
              case 82: {
                identityString_ = input.readBytes();
                bitField0_ |= 0x00000080;
                break;
              } // case 82
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int clientConnectionId_ ;
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @return Whether the clientConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasClientConnectionId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @return The clientConnectionId.
       */
      @java.lang.Override
      public int getClientConnectionId() {
        return clientConnectionId_;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @param value The clientConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setClientConnectionId(int value) {

        clientConnectionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClientConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientConnectionId_ = 0;
        onChanged();
        return this;
      }

      private long challenge_ ;
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @return Whether the challenge field is set.
       */
      @java.lang.Override
      public boolean hasChallenge() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @return The challenge.
       */
      @java.lang.Override
      public long getChallenge() {
        return challenge_;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @param value The challenge to set.
       * @return This builder for chaining.
       */
      public Builder setChallenge(long value) {

        challenge_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 challenge = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearChallenge() {
        bitField0_ = (bitField0_ & ~0x00000002);
        challenge_ = 0L;
        onChanged();
        return this;
      }

      private long myTimestamp_ ;
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       * @return Whether the myTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasMyTimestamp() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       * @return The myTimestamp.
       */
      @java.lang.Override
      public long getMyTimestamp() {
        return myTimestamp_;
      }
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       * @param value The myTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setMyTimestamp(long value) {

        myTimestamp_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 my_timestamp = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearMyTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        myTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int pingEstMs_ ;
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       * @return Whether the pingEstMs field is set.
       */
      @java.lang.Override
      public boolean hasPingEstMs() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       * @return The pingEstMs.
       */
      @java.lang.Override
      public int getPingEstMs() {
        return pingEstMs_;
      }
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       * @param value The pingEstMs to set.
       * @return This builder for chaining.
       */
      public Builder setPingEstMs(int value) {

        pingEstMs_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 ping_est_ms = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearPingEstMs() {
        bitField0_ = (bitField0_ & ~0x00000008);
        pingEstMs_ = 0;
        onChanged();
        return this;
      }

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned crypt_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> cryptBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       * @return Whether the crypt field is set.
       */
      public boolean hasCrypt() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       * @return The crypt.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
        if (cryptBuilder_ == null) {
          return crypt_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        } else {
          return cryptBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          crypt_ = value;
        } else {
          cryptBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder builderForValue) {
        if (cryptBuilder_ == null) {
          crypt_ = builderForValue.build();
        } else {
          cryptBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder mergeCrypt(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            crypt_ != null &&
            crypt_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance()) {
            getCryptBuilder().mergeFrom(value);
          } else {
            crypt_ = value;
          }
        } else {
          cryptBuilder_.mergeFrom(value);
        }
        if (crypt_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder clearCrypt() {
        bitField0_ = (bitField0_ & ~0x00000010);
        crypt_ = null;
        if (cryptBuilder_ != null) {
          cryptBuilder_.dispose();
          cryptBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder getCryptBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getCryptFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
        if (cryptBuilder_ != null) {
          return cryptBuilder_.getMessageOrBuilder();
        } else {
          return crypt_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> 
          getCryptFieldBuilder() {
        if (cryptBuilder_ == null) {
          cryptBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder>(
                  getCrypt(),
                  getParentForChildren(),
                  isClean());
          crypt_ = null;
        }
        return cryptBuilder_;
      }

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned cert_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder> certBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       * @return Whether the cert field is set.
       */
      public boolean hasCert() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       * @return The cert.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned getCert() {
        if (certBuilder_ == null) {
          return cert_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        } else {
          return certBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder setCert(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cert_ = value;
        } else {
          certBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder setCert(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder builderForValue) {
        if (certBuilder_ == null) {
          cert_ = builderForValue.build();
        } else {
          certBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder mergeCert(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            cert_ != null &&
            cert_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance()) {
            getCertBuilder().mergeFrom(value);
          } else {
            cert_ = value;
          }
        } else {
          certBuilder_.mergeFrom(value);
        }
        if (cert_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public Builder clearCert() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cert_ = null;
        if (certBuilder_ != null) {
          certBuilder_.dispose();
          certBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder getCertBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getCertFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
        if (certBuilder_ != null) {
          return certBuilder_.getMessageOrBuilder();
        } else {
          return cert_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder> 
          getCertFieldBuilder() {
        if (certBuilder_ == null) {
          certBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder>(
                  getCert(),
                  getParentForChildren(),
                  isClean());
          cert_ = null;
        }
        return certBuilder_;
      }

      private int legacyProtocolVersion_ ;
      /**
       * <code>optional uint32 legacy_protocol_version = 8;</code>
       * @return Whether the legacyProtocolVersion field is set.
       */
      @java.lang.Override
      public boolean hasLegacyProtocolVersion() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional uint32 legacy_protocol_version = 8;</code>
       * @return The legacyProtocolVersion.
       */
      @java.lang.Override
      public int getLegacyProtocolVersion() {
        return legacyProtocolVersion_;
      }
      /**
       * <code>optional uint32 legacy_protocol_version = 8;</code>
       * @param value The legacyProtocolVersion to set.
       * @return This builder for chaining.
       */
      public Builder setLegacyProtocolVersion(int value) {

        legacyProtocolVersion_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 legacy_protocol_version = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacyProtocolVersion() {
        bitField0_ = (bitField0_ & ~0x00000040);
        legacyProtocolVersion_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object identityString_ = "";
      /**
       * <code>optional string identity_string = 10;</code>
       * @return Whether the identityString field is set.
       */
      public boolean hasIdentityString() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional string identity_string = 10;</code>
       * @return The identityString.
       */
      public java.lang.String getIdentityString() {
        java.lang.Object ref = identityString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            identityString_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string identity_string = 10;</code>
       * @return The bytes for identityString.
       */
      public com.google.protobuf.ByteString
          getIdentityStringBytes() {
        java.lang.Object ref = identityString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          identityString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string identity_string = 10;</code>
       * @param value The identityString to set.
       * @return This builder for chaining.
       */
      public Builder setIdentityString(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        identityString_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional string identity_string = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentityString() {
        identityString_ = getDefaultInstance().getIdentityString();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }
      /**
       * <code>optional string identity_string = 10;</code>
       * @param value The bytes for identityString to set.
       * @return This builder for chaining.
       */
      public Builder setIdentityStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        identityString_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }

      private long legacyClientSteamId_ ;
      /**
       * <code>optional fixed64 legacy_client_steam_id = 3;</code>
       * @return Whether the legacyClientSteamId field is set.
       */
      @java.lang.Override
      public boolean hasLegacyClientSteamId() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional fixed64 legacy_client_steam_id = 3;</code>
       * @return The legacyClientSteamId.
       */
      @java.lang.Override
      public long getLegacyClientSteamId() {
        return legacyClientSteamId_;
      }
      /**
       * <code>optional fixed64 legacy_client_steam_id = 3;</code>
       * @param value The legacyClientSteamId to set.
       * @return This builder for chaining.
       */
      public Builder setLegacyClientSteamId(long value) {

        legacyClientSteamId_ = value;
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 legacy_client_steam_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacyClientSteamId() {
        bitField0_ = (bitField0_ & ~0x00000100);
        legacyClientSteamId_ = 0L;
        onChanged();
        return this;
      }

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary legacyIdentityBinary_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder> legacyIdentityBinaryBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       * @return Whether the legacyIdentityBinary field is set.
       */
      public boolean hasLegacyIdentityBinary() {
        return ((bitField0_ & 0x00000200) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       * @return The legacyIdentityBinary.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary getLegacyIdentityBinary() {
        if (legacyIdentityBinaryBuilder_ == null) {
          return legacyIdentityBinary_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
        } else {
          return legacyIdentityBinaryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      public Builder setLegacyIdentityBinary(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary value) {
        if (legacyIdentityBinaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          legacyIdentityBinary_ = value;
        } else {
          legacyIdentityBinaryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      public Builder setLegacyIdentityBinary(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder builderForValue) {
        if (legacyIdentityBinaryBuilder_ == null) {
          legacyIdentityBinary_ = builderForValue.build();
        } else {
          legacyIdentityBinaryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000200;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      public Builder mergeLegacyIdentityBinary(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary value) {
        if (legacyIdentityBinaryBuilder_ == null) {
          if (((bitField0_ & 0x00000200) != 0) &&
            legacyIdentityBinary_ != null &&
            legacyIdentityBinary_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance()) {
            getLegacyIdentityBinaryBuilder().mergeFrom(value);
          } else {
            legacyIdentityBinary_ = value;
          }
        } else {
          legacyIdentityBinaryBuilder_.mergeFrom(value);
        }
        if (legacyIdentityBinary_ != null) {
          bitField0_ |= 0x00000200;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      public Builder clearLegacyIdentityBinary() {
        bitField0_ = (bitField0_ & ~0x00000200);
        legacyIdentityBinary_ = null;
        if (legacyIdentityBinaryBuilder_ != null) {
          legacyIdentityBinaryBuilder_.dispose();
          legacyIdentityBinaryBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder getLegacyIdentityBinaryBuilder() {
        bitField0_ |= 0x00000200;
        onChanged();
        return getLegacyIdentityBinaryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder getLegacyIdentityBinaryOrBuilder() {
        if (legacyIdentityBinaryBuilder_ != null) {
          return legacyIdentityBinaryBuilder_.getMessageOrBuilder();
        } else {
          return legacyIdentityBinary_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 9;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder> 
          getLegacyIdentityBinaryFieldBuilder() {
        if (legacyIdentityBinaryBuilder_ == null) {
          legacyIdentityBinaryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder>(
                  getLegacyIdentityBinary(),
                  getParentForChildren(),
                  isClean());
          legacyIdentityBinary_ = null;
        }
        return legacyIdentityBinaryBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_ConnectRequest)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_ConnectRequest)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectRequest>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ConnectRequest>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ConnectRequest parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectRequest> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectRequest> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectRequest getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ConnectOKOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_ConnectOK)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return Whether the clientConnectionId field is set.
     */
    boolean hasClientConnectionId();
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return The clientConnectionId.
     */
    int getClientConnectionId();

    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     * @return Whether the serverConnectionId field is set.
     */
    boolean hasServerConnectionId();
    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     * @return The serverConnectionId.
     */
    int getServerConnectionId();

    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return Whether the yourTimestamp field is set.
     */
    boolean hasYourTimestamp();
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return The yourTimestamp.
     */
    long getYourTimestamp();

    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     * @return Whether the delayTimeUsec field is set.
     */
    boolean hasDelayTimeUsec();
    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     * @return The delayTimeUsec.
     */
    int getDelayTimeUsec();

    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return Whether the crypt field is set.
     */
    boolean hasCrypt();
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return The crypt.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned getCrypt();
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder();

    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
     * @return Whether the cert field is set.
     */
    boolean hasCert();
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
     * @return The cert.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned getCert();
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder();

    /**
     * <code>optional string identity_string = 11;</code>
     * @return Whether the identityString field is set.
     */
    boolean hasIdentityString();
    /**
     * <code>optional string identity_string = 11;</code>
     * @return The identityString.
     */
    java.lang.String getIdentityString();
    /**
     * <code>optional string identity_string = 11;</code>
     * @return The bytes for identityString.
     */
    com.google.protobuf.ByteString
        getIdentityStringBytes();

    /**
     * <code>optional fixed64 legacy_server_steam_id = 2;</code>
     * @return Whether the legacyServerSteamId field is set.
     */
    boolean hasLegacyServerSteamId();
    /**
     * <code>optional fixed64 legacy_server_steam_id = 2;</code>
     * @return The legacyServerSteamId.
     */
    long getLegacyServerSteamId();

    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
     * @return Whether the legacyIdentityBinary field is set.
     */
    boolean hasLegacyIdentityBinary();
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
     * @return The legacyIdentityBinary.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary getLegacyIdentityBinary();
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder getLegacyIdentityBinaryOrBuilder();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ConnectOK}
   */
  public static final class CMsgSteamSockets_UDP_ConnectOK extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_ConnectOK)
      CMsgSteamSockets_UDP_ConnectOKOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_ConnectOK.class.getName());
    }
    // Use CMsgSteamSockets_UDP_ConnectOK.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ConnectOK(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ConnectOK() {
      identityString_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.Builder.class);
    }

    private int bitField0_;
    public static final int CLIENT_CONNECTION_ID_FIELD_NUMBER = 1;
    private int clientConnectionId_ = 0;
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return Whether the clientConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasClientConnectionId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional fixed32 client_connection_id = 1;</code>
     * @return The clientConnectionId.
     */
    @java.lang.Override
    public int getClientConnectionId() {
      return clientConnectionId_;
    }

    public static final int SERVER_CONNECTION_ID_FIELD_NUMBER = 5;
    private int serverConnectionId_ = 0;
    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     * @return Whether the serverConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasServerConnectionId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional fixed32 server_connection_id = 5;</code>
     * @return The serverConnectionId.
     */
    @java.lang.Override
    public int getServerConnectionId() {
      return serverConnectionId_;
    }

    public static final int YOUR_TIMESTAMP_FIELD_NUMBER = 3;
    private long yourTimestamp_ = 0L;
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return Whether the yourTimestamp field is set.
     */
    @java.lang.Override
    public boolean hasYourTimestamp() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional fixed64 your_timestamp = 3;</code>
     * @return The yourTimestamp.
     */
    @java.lang.Override
    public long getYourTimestamp() {
      return yourTimestamp_;
    }

    public static final int DELAY_TIME_USEC_FIELD_NUMBER = 4;
    private int delayTimeUsec_ = 0;
    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     * @return Whether the delayTimeUsec field is set.
     */
    @java.lang.Override
    public boolean hasDelayTimeUsec() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional uint32 delay_time_usec = 4;</code>
     * @return The delayTimeUsec.
     */
    @java.lang.Override
    public int getDelayTimeUsec() {
      return delayTimeUsec_;
    }

    public static final int CRYPT_FIELD_NUMBER = 7;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned crypt_;
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return Whether the crypt field is set.
     */
    @java.lang.Override
    public boolean hasCrypt() {
      return ((bitField0_ & 0x00000010) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     * @return The crypt.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
      return crypt_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
      return crypt_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
    }

    public static final int CERT_FIELD_NUMBER = 8;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned cert_;
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
     * @return Whether the cert field is set.
     */
    @java.lang.Override
    public boolean hasCert() {
      return ((bitField0_ & 0x00000020) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
     * @return The cert.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned getCert() {
      return cert_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
      return cert_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
    }

    public static final int IDENTITY_STRING_FIELD_NUMBER = 11;
    @SuppressWarnings("serial")
    private volatile java.lang.Object identityString_ = "";
    /**
     * <code>optional string identity_string = 11;</code>
     * @return Whether the identityString field is set.
     */
    @java.lang.Override
    public boolean hasIdentityString() {
      return ((bitField0_ & 0x00000040) != 0);
    }
    /**
     * <code>optional string identity_string = 11;</code>
     * @return The identityString.
     */
    @java.lang.Override
    public java.lang.String getIdentityString() {
      java.lang.Object ref = identityString_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          identityString_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string identity_string = 11;</code>
     * @return The bytes for identityString.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getIdentityStringBytes() {
      java.lang.Object ref = identityString_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        identityString_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int LEGACY_SERVER_STEAM_ID_FIELD_NUMBER = 2;
    private long legacyServerSteamId_ = 0L;
    /**
     * <code>optional fixed64 legacy_server_steam_id = 2;</code>
     * @return Whether the legacyServerSteamId field is set.
     */
    @java.lang.Override
    public boolean hasLegacyServerSteamId() {
      return ((bitField0_ & 0x00000080) != 0);
    }
    /**
     * <code>optional fixed64 legacy_server_steam_id = 2;</code>
     * @return The legacyServerSteamId.
     */
    @java.lang.Override
    public long getLegacyServerSteamId() {
      return legacyServerSteamId_;
    }

    public static final int LEGACY_IDENTITY_BINARY_FIELD_NUMBER = 10;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary legacyIdentityBinary_;
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
     * @return Whether the legacyIdentityBinary field is set.
     */
    @java.lang.Override
    public boolean hasLegacyIdentityBinary() {
      return ((bitField0_ & 0x00000100) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
     * @return The legacyIdentityBinary.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary getLegacyIdentityBinary() {
      return legacyIdentityBinary_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
    }
    /**
     * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder getLegacyIdentityBinaryOrBuilder() {
      return legacyIdentityBinary_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFixed32(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        output.writeFixed64(2, legacyServerSteamId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        output.writeFixed64(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(4, delayTimeUsec_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFixed32(5, serverConnectionId_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        output.writeMessage(7, getCrypt());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        output.writeMessage(8, getCert());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        output.writeMessage(10, getLegacyIdentityBinary());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 11, identityString_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(1, clientConnectionId_);
      }
      if (((bitField0_ & 0x00000080) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(2, legacyServerSteamId_);
      }
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed64Size(3, yourTimestamp_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, delayTimeUsec_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, serverConnectionId_);
      }
      if (((bitField0_ & 0x00000010) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, getCrypt());
      }
      if (((bitField0_ & 0x00000020) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(8, getCert());
      }
      if (((bitField0_ & 0x00000100) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(10, getLegacyIdentityBinary());
      }
      if (((bitField0_ & 0x00000040) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(11, identityString_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK) obj;

      if (hasClientConnectionId() != other.hasClientConnectionId()) return false;
      if (hasClientConnectionId()) {
        if (getClientConnectionId()
            != other.getClientConnectionId()) return false;
      }
      if (hasServerConnectionId() != other.hasServerConnectionId()) return false;
      if (hasServerConnectionId()) {
        if (getServerConnectionId()
            != other.getServerConnectionId()) return false;
      }
      if (hasYourTimestamp() != other.hasYourTimestamp()) return false;
      if (hasYourTimestamp()) {
        if (getYourTimestamp()
            != other.getYourTimestamp()) return false;
      }
      if (hasDelayTimeUsec() != other.hasDelayTimeUsec()) return false;
      if (hasDelayTimeUsec()) {
        if (getDelayTimeUsec()
            != other.getDelayTimeUsec()) return false;
      }
      if (hasCrypt() != other.hasCrypt()) return false;
      if (hasCrypt()) {
        if (!getCrypt()
            .equals(other.getCrypt())) return false;
      }
      if (hasCert() != other.hasCert()) return false;
      if (hasCert()) {
        if (!getCert()
            .equals(other.getCert())) return false;
      }
      if (hasIdentityString() != other.hasIdentityString()) return false;
      if (hasIdentityString()) {
        if (!getIdentityString()
            .equals(other.getIdentityString())) return false;
      }
      if (hasLegacyServerSteamId() != other.hasLegacyServerSteamId()) return false;
      if (hasLegacyServerSteamId()) {
        if (getLegacyServerSteamId()
            != other.getLegacyServerSteamId()) return false;
      }
      if (hasLegacyIdentityBinary() != other.hasLegacyIdentityBinary()) return false;
      if (hasLegacyIdentityBinary()) {
        if (!getLegacyIdentityBinary()
            .equals(other.getLegacyIdentityBinary())) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasClientConnectionId()) {
        hash = (37 * hash) + CLIENT_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getClientConnectionId();
      }
      if (hasServerConnectionId()) {
        hash = (37 * hash) + SERVER_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getServerConnectionId();
      }
      if (hasYourTimestamp()) {
        hash = (37 * hash) + YOUR_TIMESTAMP_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getYourTimestamp());
      }
      if (hasDelayTimeUsec()) {
        hash = (37 * hash) + DELAY_TIME_USEC_FIELD_NUMBER;
        hash = (53 * hash) + getDelayTimeUsec();
      }
      if (hasCrypt()) {
        hash = (37 * hash) + CRYPT_FIELD_NUMBER;
        hash = (53 * hash) + getCrypt().hashCode();
      }
      if (hasCert()) {
        hash = (37 * hash) + CERT_FIELD_NUMBER;
        hash = (53 * hash) + getCert().hashCode();
      }
      if (hasIdentityString()) {
        hash = (37 * hash) + IDENTITY_STRING_FIELD_NUMBER;
        hash = (53 * hash) + getIdentityString().hashCode();
      }
      if (hasLegacyServerSteamId()) {
        hash = (37 * hash) + LEGACY_SERVER_STEAM_ID_FIELD_NUMBER;
        hash = (53 * hash) + com.google.protobuf.Internal.hashLong(
            getLegacyServerSteamId());
      }
      if (hasLegacyIdentityBinary()) {
        hash = (37 * hash) + LEGACY_IDENTITY_BINARY_FIELD_NUMBER;
        hash = (53 * hash) + getLegacyIdentityBinary().hashCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ConnectOK}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_ConnectOK)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOKOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getCryptFieldBuilder();
          getCertFieldBuilder();
          getLegacyIdentityBinaryFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        clientConnectionId_ = 0;
        serverConnectionId_ = 0;
        yourTimestamp_ = 0L;
        delayTimeUsec_ = 0;
        crypt_ = null;
        if (cryptBuilder_ != null) {
          cryptBuilder_.dispose();
          cryptBuilder_ = null;
        }
        cert_ = null;
        if (certBuilder_ != null) {
          certBuilder_.dispose();
          certBuilder_ = null;
        }
        identityString_ = "";
        legacyServerSteamId_ = 0L;
        legacyIdentityBinary_ = null;
        if (legacyIdentityBinaryBuilder_ != null) {
          legacyIdentityBinaryBuilder_.dispose();
          legacyIdentityBinaryBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.clientConnectionId_ = clientConnectionId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.serverConnectionId_ = serverConnectionId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.yourTimestamp_ = yourTimestamp_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.delayTimeUsec_ = delayTimeUsec_;
          to_bitField0_ |= 0x00000008;
        }
        if (((from_bitField0_ & 0x00000010) != 0)) {
          result.crypt_ = cryptBuilder_ == null
              ? crypt_
              : cryptBuilder_.build();
          to_bitField0_ |= 0x00000010;
        }
        if (((from_bitField0_ & 0x00000020) != 0)) {
          result.cert_ = certBuilder_ == null
              ? cert_
              : certBuilder_.build();
          to_bitField0_ |= 0x00000020;
        }
        if (((from_bitField0_ & 0x00000040) != 0)) {
          result.identityString_ = identityString_;
          to_bitField0_ |= 0x00000040;
        }
        if (((from_bitField0_ & 0x00000080) != 0)) {
          result.legacyServerSteamId_ = legacyServerSteamId_;
          to_bitField0_ |= 0x00000080;
        }
        if (((from_bitField0_ & 0x00000100) != 0)) {
          result.legacyIdentityBinary_ = legacyIdentityBinaryBuilder_ == null
              ? legacyIdentityBinary_
              : legacyIdentityBinaryBuilder_.build();
          to_bitField0_ |= 0x00000100;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK.getDefaultInstance()) return this;
        if (other.hasClientConnectionId()) {
          setClientConnectionId(other.getClientConnectionId());
        }
        if (other.hasServerConnectionId()) {
          setServerConnectionId(other.getServerConnectionId());
        }
        if (other.hasYourTimestamp()) {
          setYourTimestamp(other.getYourTimestamp());
        }
        if (other.hasDelayTimeUsec()) {
          setDelayTimeUsec(other.getDelayTimeUsec());
        }
        if (other.hasCrypt()) {
          mergeCrypt(other.getCrypt());
        }
        if (other.hasCert()) {
          mergeCert(other.getCert());
        }
        if (other.hasIdentityString()) {
          identityString_ = other.identityString_;
          bitField0_ |= 0x00000040;
          onChanged();
        }
        if (other.hasLegacyServerSteamId()) {
          setLegacyServerSteamId(other.getLegacyServerSteamId());
        }
        if (other.hasLegacyIdentityBinary()) {
          mergeLegacyIdentityBinary(other.getLegacyIdentityBinary());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 13: {
                clientConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000001;
                break;
              } // case 13
              case 17: {
                legacyServerSteamId_ = input.readFixed64();
                bitField0_ |= 0x00000080;
                break;
              } // case 17
              case 25: {
                yourTimestamp_ = input.readFixed64();
                bitField0_ |= 0x00000004;
                break;
              } // case 25
              case 32: {
                delayTimeUsec_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 32
              case 45: {
                serverConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000002;
                break;
              } // case 45
              case 58: {
                input.readMessage(
                    getCryptFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000010;
                break;
              } // case 58
              case 66: {
                input.readMessage(
                    getCertFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000020;
                break;
              } // case 66
              case 82: {
                input.readMessage(
                    getLegacyIdentityBinaryFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000100;
                break;
              } // case 82
              case 90: {
                identityString_ = input.readBytes();
                bitField0_ |= 0x00000040;
                break;
              } // case 90
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int clientConnectionId_ ;
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @return Whether the clientConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasClientConnectionId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @return The clientConnectionId.
       */
      @java.lang.Override
      public int getClientConnectionId() {
        return clientConnectionId_;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @param value The clientConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setClientConnectionId(int value) {

        clientConnectionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 client_connection_id = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearClientConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        clientConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int serverConnectionId_ ;
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       * @return Whether the serverConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasServerConnectionId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       * @return The serverConnectionId.
       */
      @java.lang.Override
      public int getServerConnectionId() {
        return serverConnectionId_;
      }
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       * @param value The serverConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setServerConnectionId(int value) {

        serverConnectionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 server_connection_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearServerConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        serverConnectionId_ = 0;
        onChanged();
        return this;
      }

      private long yourTimestamp_ ;
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @return Whether the yourTimestamp field is set.
       */
      @java.lang.Override
      public boolean hasYourTimestamp() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @return The yourTimestamp.
       */
      @java.lang.Override
      public long getYourTimestamp() {
        return yourTimestamp_;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @param value The yourTimestamp to set.
       * @return This builder for chaining.
       */
      public Builder setYourTimestamp(long value) {

        yourTimestamp_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 your_timestamp = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearYourTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000004);
        yourTimestamp_ = 0L;
        onChanged();
        return this;
      }

      private int delayTimeUsec_ ;
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       * @return Whether the delayTimeUsec field is set.
       */
      @java.lang.Override
      public boolean hasDelayTimeUsec() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       * @return The delayTimeUsec.
       */
      @java.lang.Override
      public int getDelayTimeUsec() {
        return delayTimeUsec_;
      }
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       * @param value The delayTimeUsec to set.
       * @return This builder for chaining.
       */
      public Builder setDelayTimeUsec(int value) {

        delayTimeUsec_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 delay_time_usec = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearDelayTimeUsec() {
        bitField0_ = (bitField0_ & ~0x00000008);
        delayTimeUsec_ = 0;
        onChanged();
        return this;
      }

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned crypt_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> cryptBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       * @return Whether the crypt field is set.
       */
      public boolean hasCrypt() {
        return ((bitField0_ & 0x00000010) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       * @return The crypt.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned getCrypt() {
        if (cryptBuilder_ == null) {
          return crypt_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        } else {
          return cryptBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          crypt_ = value;
        } else {
          cryptBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder setCrypt(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder builderForValue) {
        if (cryptBuilder_ == null) {
          crypt_ = builderForValue.build();
        } else {
          cryptBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000010;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder mergeCrypt(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned value) {
        if (cryptBuilder_ == null) {
          if (((bitField0_ & 0x00000010) != 0) &&
            crypt_ != null &&
            crypt_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance()) {
            getCryptBuilder().mergeFrom(value);
          } else {
            crypt_ = value;
          }
        } else {
          cryptBuilder_.mergeFrom(value);
        }
        if (crypt_ != null) {
          bitField0_ |= 0x00000010;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public Builder clearCrypt() {
        bitField0_ = (bitField0_ & ~0x00000010);
        crypt_ = null;
        if (cryptBuilder_ != null) {
          cryptBuilder_.dispose();
          cryptBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder getCryptBuilder() {
        bitField0_ |= 0x00000010;
        onChanged();
        return getCryptFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder getCryptOrBuilder() {
        if (cryptBuilder_ != null) {
          return cryptBuilder_.getMessageOrBuilder();
        } else {
          return crypt_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.getDefaultInstance() : crypt_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramSessionCryptInfoSigned crypt = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder> 
          getCryptFieldBuilder() {
        if (cryptBuilder_ == null) {
          cryptBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramSessionCryptInfoSignedOrBuilder>(
                  getCrypt(),
                  getParentForChildren(),
                  isClean());
          crypt_ = null;
        }
        return cryptBuilder_;
      }

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned cert_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder> certBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       * @return Whether the cert field is set.
       */
      public boolean hasCert() {
        return ((bitField0_ & 0x00000020) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       * @return The cert.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned getCert() {
        if (certBuilder_ == null) {
          return cert_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        } else {
          return certBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder setCert(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          cert_ = value;
        } else {
          certBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder setCert(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder builderForValue) {
        if (certBuilder_ == null) {
          cert_ = builderForValue.build();
        } else {
          certBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000020;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder mergeCert(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned value) {
        if (certBuilder_ == null) {
          if (((bitField0_ & 0x00000020) != 0) &&
            cert_ != null &&
            cert_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance()) {
            getCertBuilder().mergeFrom(value);
          } else {
            cert_ = value;
          }
        } else {
          certBuilder_.mergeFrom(value);
        }
        if (cert_ != null) {
          bitField0_ |= 0x00000020;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public Builder clearCert() {
        bitField0_ = (bitField0_ & ~0x00000020);
        cert_ = null;
        if (certBuilder_ != null) {
          certBuilder_.dispose();
          certBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder getCertBuilder() {
        bitField0_ |= 0x00000020;
        onChanged();
        return getCertFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder getCertOrBuilder() {
        if (certBuilder_ != null) {
          return certBuilder_.getMessageOrBuilder();
        } else {
          return cert_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.getDefaultInstance() : cert_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramCertificateSigned cert = 8;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder> 
          getCertFieldBuilder() {
        if (certBuilder_ == null) {
          certBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSigned.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamDatagramCertificateSignedOrBuilder>(
                  getCert(),
                  getParentForChildren(),
                  isClean());
          cert_ = null;
        }
        return certBuilder_;
      }

      private java.lang.Object identityString_ = "";
      /**
       * <code>optional string identity_string = 11;</code>
       * @return Whether the identityString field is set.
       */
      public boolean hasIdentityString() {
        return ((bitField0_ & 0x00000040) != 0);
      }
      /**
       * <code>optional string identity_string = 11;</code>
       * @return The identityString.
       */
      public java.lang.String getIdentityString() {
        java.lang.Object ref = identityString_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            identityString_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string identity_string = 11;</code>
       * @return The bytes for identityString.
       */
      public com.google.protobuf.ByteString
          getIdentityStringBytes() {
        java.lang.Object ref = identityString_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          identityString_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string identity_string = 11;</code>
       * @param value The identityString to set.
       * @return This builder for chaining.
       */
      public Builder setIdentityString(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        identityString_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }
      /**
       * <code>optional string identity_string = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearIdentityString() {
        identityString_ = getDefaultInstance().getIdentityString();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }
      /**
       * <code>optional string identity_string = 11;</code>
       * @param value The bytes for identityString to set.
       * @return This builder for chaining.
       */
      public Builder setIdentityStringBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        identityString_ = value;
        bitField0_ |= 0x00000040;
        onChanged();
        return this;
      }

      private long legacyServerSteamId_ ;
      /**
       * <code>optional fixed64 legacy_server_steam_id = 2;</code>
       * @return Whether the legacyServerSteamId field is set.
       */
      @java.lang.Override
      public boolean hasLegacyServerSteamId() {
        return ((bitField0_ & 0x00000080) != 0);
      }
      /**
       * <code>optional fixed64 legacy_server_steam_id = 2;</code>
       * @return The legacyServerSteamId.
       */
      @java.lang.Override
      public long getLegacyServerSteamId() {
        return legacyServerSteamId_;
      }
      /**
       * <code>optional fixed64 legacy_server_steam_id = 2;</code>
       * @param value The legacyServerSteamId to set.
       * @return This builder for chaining.
       */
      public Builder setLegacyServerSteamId(long value) {

        legacyServerSteamId_ = value;
        bitField0_ |= 0x00000080;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed64 legacy_server_steam_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearLegacyServerSteamId() {
        bitField0_ = (bitField0_ & ~0x00000080);
        legacyServerSteamId_ = 0L;
        onChanged();
        return this;
      }

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary legacyIdentityBinary_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder> legacyIdentityBinaryBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       * @return Whether the legacyIdentityBinary field is set.
       */
      public boolean hasLegacyIdentityBinary() {
        return ((bitField0_ & 0x00000100) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       * @return The legacyIdentityBinary.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary getLegacyIdentityBinary() {
        if (legacyIdentityBinaryBuilder_ == null) {
          return legacyIdentityBinary_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
        } else {
          return legacyIdentityBinaryBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      public Builder setLegacyIdentityBinary(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary value) {
        if (legacyIdentityBinaryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          legacyIdentityBinary_ = value;
        } else {
          legacyIdentityBinaryBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      public Builder setLegacyIdentityBinary(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder builderForValue) {
        if (legacyIdentityBinaryBuilder_ == null) {
          legacyIdentityBinary_ = builderForValue.build();
        } else {
          legacyIdentityBinaryBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000100;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      public Builder mergeLegacyIdentityBinary(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary value) {
        if (legacyIdentityBinaryBuilder_ == null) {
          if (((bitField0_ & 0x00000100) != 0) &&
            legacyIdentityBinary_ != null &&
            legacyIdentityBinary_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance()) {
            getLegacyIdentityBinaryBuilder().mergeFrom(value);
          } else {
            legacyIdentityBinary_ = value;
          }
        } else {
          legacyIdentityBinaryBuilder_.mergeFrom(value);
        }
        if (legacyIdentityBinary_ != null) {
          bitField0_ |= 0x00000100;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      public Builder clearLegacyIdentityBinary() {
        bitField0_ = (bitField0_ & ~0x00000100);
        legacyIdentityBinary_ = null;
        if (legacyIdentityBinaryBuilder_ != null) {
          legacyIdentityBinaryBuilder_.dispose();
          legacyIdentityBinaryBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder getLegacyIdentityBinaryBuilder() {
        bitField0_ |= 0x00000100;
        onChanged();
        return getLegacyIdentityBinaryFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder getLegacyIdentityBinaryOrBuilder() {
        if (legacyIdentityBinaryBuilder_ != null) {
          return legacyIdentityBinaryBuilder_.getMessageOrBuilder();
        } else {
          return legacyIdentityBinary_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.getDefaultInstance() : legacyIdentityBinary_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamNetworkingIdentityLegacyBinary legacy_identity_binary = 10;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder> 
          getLegacyIdentityBinaryFieldBuilder() {
        if (legacyIdentityBinaryBuilder_ == null) {
          legacyIdentityBinaryBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinary.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.CMsgSteamNetworkingIdentityLegacyBinaryOrBuilder>(
                  getLegacyIdentityBinary(),
                  getParentForChildren(),
                  isClean());
          legacyIdentityBinary_ = null;
        }
        return legacyIdentityBinaryBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_ConnectOK)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_ConnectOK)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectOK>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ConnectOK>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ConnectOK parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectOK> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectOK> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectOK getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_ConnectionClosedOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_ConnectionClosed)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     * @return Whether the toConnectionId field is set.
     */
    boolean hasToConnectionId();
    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     * @return The toConnectionId.
     */
    int getToConnectionId();

    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     * @return Whether the fromConnectionId field is set.
     */
    boolean hasFromConnectionId();
    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     * @return The fromConnectionId.
     */
    int getFromConnectionId();

    /**
     * <code>optional string debug = 2;</code>
     * @return Whether the debug field is set.
     */
    boolean hasDebug();
    /**
     * <code>optional string debug = 2;</code>
     * @return The debug.
     */
    java.lang.String getDebug();
    /**
     * <code>optional string debug = 2;</code>
     * @return The bytes for debug.
     */
    com.google.protobuf.ByteString
        getDebugBytes();

    /**
     * <code>optional uint32 reason_code = 3;</code>
     * @return Whether the reasonCode field is set.
     */
    boolean hasReasonCode();
    /**
     * <code>optional uint32 reason_code = 3;</code>
     * @return The reasonCode.
     */
    int getReasonCode();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ConnectionClosed}
   */
  public static final class CMsgSteamSockets_UDP_ConnectionClosed extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_ConnectionClosed)
      CMsgSteamSockets_UDP_ConnectionClosedOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_ConnectionClosed.class.getName());
    }
    // Use CMsgSteamSockets_UDP_ConnectionClosed.newBuilder() to construct.
    private CMsgSteamSockets_UDP_ConnectionClosed(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_ConnectionClosed() {
      debug_ = "";
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.Builder.class);
    }

    private int bitField0_;
    public static final int TO_CONNECTION_ID_FIELD_NUMBER = 4;
    private int toConnectionId_ = 0;
    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     * @return Whether the toConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasToConnectionId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional fixed32 to_connection_id = 4;</code>
     * @return The toConnectionId.
     */
    @java.lang.Override
    public int getToConnectionId() {
      return toConnectionId_;
    }

    public static final int FROM_CONNECTION_ID_FIELD_NUMBER = 5;
    private int fromConnectionId_ = 0;
    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     * @return Whether the fromConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasFromConnectionId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional fixed32 from_connection_id = 5;</code>
     * @return The fromConnectionId.
     */
    @java.lang.Override
    public int getFromConnectionId() {
      return fromConnectionId_;
    }

    public static final int DEBUG_FIELD_NUMBER = 2;
    @SuppressWarnings("serial")
    private volatile java.lang.Object debug_ = "";
    /**
     * <code>optional string debug = 2;</code>
     * @return Whether the debug field is set.
     */
    @java.lang.Override
    public boolean hasDebug() {
      return ((bitField0_ & 0x00000004) != 0);
    }
    /**
     * <code>optional string debug = 2;</code>
     * @return The debug.
     */
    @java.lang.Override
    public java.lang.String getDebug() {
      java.lang.Object ref = debug_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          debug_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string debug = 2;</code>
     * @return The bytes for debug.
     */
    @java.lang.Override
    public com.google.protobuf.ByteString
        getDebugBytes() {
      java.lang.Object ref = debug_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        debug_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int REASON_CODE_FIELD_NUMBER = 3;
    private int reasonCode_ = 0;
    /**
     * <code>optional uint32 reason_code = 3;</code>
     * @return Whether the reasonCode field is set.
     */
    @java.lang.Override
    public boolean hasReasonCode() {
      return ((bitField0_ & 0x00000008) != 0);
    }
    /**
     * <code>optional uint32 reason_code = 3;</code>
     * @return The reasonCode.
     */
    @java.lang.Override
    public int getReasonCode() {
      return reasonCode_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000004) != 0)) {
        com.google.protobuf.GeneratedMessage.writeString(output, 2, debug_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        output.writeUInt32(3, reasonCode_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFixed32(4, toConnectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFixed32(5, fromConnectionId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000004) != 0)) {
        size += com.google.protobuf.GeneratedMessage.computeStringSize(2, debug_);
      }
      if (((bitField0_ & 0x00000008) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, reasonCode_);
      }
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(4, toConnectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(5, fromConnectionId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed) obj;

      if (hasToConnectionId() != other.hasToConnectionId()) return false;
      if (hasToConnectionId()) {
        if (getToConnectionId()
            != other.getToConnectionId()) return false;
      }
      if (hasFromConnectionId() != other.hasFromConnectionId()) return false;
      if (hasFromConnectionId()) {
        if (getFromConnectionId()
            != other.getFromConnectionId()) return false;
      }
      if (hasDebug() != other.hasDebug()) return false;
      if (hasDebug()) {
        if (!getDebug()
            .equals(other.getDebug())) return false;
      }
      if (hasReasonCode() != other.hasReasonCode()) return false;
      if (hasReasonCode()) {
        if (getReasonCode()
            != other.getReasonCode()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasToConnectionId()) {
        hash = (37 * hash) + TO_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getToConnectionId();
      }
      if (hasFromConnectionId()) {
        hash = (37 * hash) + FROM_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFromConnectionId();
      }
      if (hasDebug()) {
        hash = (37 * hash) + DEBUG_FIELD_NUMBER;
        hash = (53 * hash) + getDebug().hashCode();
      }
      if (hasReasonCode()) {
        hash = (37 * hash) + REASON_CODE_FIELD_NUMBER;
        hash = (53 * hash) + getReasonCode();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_ConnectionClosed}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_ConnectionClosed)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosedOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        toConnectionId_ = 0;
        fromConnectionId_ = 0;
        debug_ = "";
        reasonCode_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.toConnectionId_ = toConnectionId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.fromConnectionId_ = fromConnectionId_;
          to_bitField0_ |= 0x00000002;
        }
        if (((from_bitField0_ & 0x00000004) != 0)) {
          result.debug_ = debug_;
          to_bitField0_ |= 0x00000004;
        }
        if (((from_bitField0_ & 0x00000008) != 0)) {
          result.reasonCode_ = reasonCode_;
          to_bitField0_ |= 0x00000008;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed.getDefaultInstance()) return this;
        if (other.hasToConnectionId()) {
          setToConnectionId(other.getToConnectionId());
        }
        if (other.hasFromConnectionId()) {
          setFromConnectionId(other.getFromConnectionId());
        }
        if (other.hasDebug()) {
          debug_ = other.debug_;
          bitField0_ |= 0x00000004;
          onChanged();
        }
        if (other.hasReasonCode()) {
          setReasonCode(other.getReasonCode());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 18: {
                debug_ = input.readBytes();
                bitField0_ |= 0x00000004;
                break;
              } // case 18
              case 24: {
                reasonCode_ = input.readUInt32();
                bitField0_ |= 0x00000008;
                break;
              } // case 24
              case 37: {
                toConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000001;
                break;
              } // case 37
              case 45: {
                fromConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000002;
                break;
              } // case 45
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int toConnectionId_ ;
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       * @return Whether the toConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasToConnectionId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       * @return The toConnectionId.
       */
      @java.lang.Override
      public int getToConnectionId() {
        return toConnectionId_;
      }
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       * @param value The toConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setToConnectionId(int value) {

        toConnectionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 to_connection_id = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearToConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        toConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int fromConnectionId_ ;
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       * @return Whether the fromConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasFromConnectionId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       * @return The fromConnectionId.
       */
      @java.lang.Override
      public int getFromConnectionId() {
        return fromConnectionId_;
      }
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       * @param value The fromConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setFromConnectionId(int value) {

        fromConnectionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 from_connection_id = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearFromConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        fromConnectionId_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object debug_ = "";
      /**
       * <code>optional string debug = 2;</code>
       * @return Whether the debug field is set.
       */
      public boolean hasDebug() {
        return ((bitField0_ & 0x00000004) != 0);
      }
      /**
       * <code>optional string debug = 2;</code>
       * @return The debug.
       */
      public java.lang.String getDebug() {
        java.lang.Object ref = debug_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            debug_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string debug = 2;</code>
       * @return The bytes for debug.
       */
      public com.google.protobuf.ByteString
          getDebugBytes() {
        java.lang.Object ref = debug_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          debug_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string debug = 2;</code>
       * @param value The debug to set.
       * @return This builder for chaining.
       */
      public Builder setDebug(
          java.lang.String value) {
        if (value == null) { throw new NullPointerException(); }
        debug_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }
      /**
       * <code>optional string debug = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearDebug() {
        debug_ = getDefaultInstance().getDebug();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }
      /**
       * <code>optional string debug = 2;</code>
       * @param value The bytes for debug to set.
       * @return This builder for chaining.
       */
      public Builder setDebugBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) { throw new NullPointerException(); }
        debug_ = value;
        bitField0_ |= 0x00000004;
        onChanged();
        return this;
      }

      private int reasonCode_ ;
      /**
       * <code>optional uint32 reason_code = 3;</code>
       * @return Whether the reasonCode field is set.
       */
      @java.lang.Override
      public boolean hasReasonCode() {
        return ((bitField0_ & 0x00000008) != 0);
      }
      /**
       * <code>optional uint32 reason_code = 3;</code>
       * @return The reasonCode.
       */
      @java.lang.Override
      public int getReasonCode() {
        return reasonCode_;
      }
      /**
       * <code>optional uint32 reason_code = 3;</code>
       * @param value The reasonCode to set.
       * @return This builder for chaining.
       */
      public Builder setReasonCode(int value) {

        reasonCode_ = value;
        bitField0_ |= 0x00000008;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 reason_code = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearReasonCode() {
        bitField0_ = (bitField0_ & ~0x00000008);
        reasonCode_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_ConnectionClosed)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_ConnectionClosed)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectionClosed>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_ConnectionClosed>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_ConnectionClosed parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectionClosed> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_ConnectionClosed> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_ConnectionClosed getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_NoConnectionOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_NoConnection)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     * @return Whether the fromConnectionId field is set.
     */
    boolean hasFromConnectionId();
    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     * @return The fromConnectionId.
     */
    int getFromConnectionId();

    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     * @return Whether the toConnectionId field is set.
     */
    boolean hasToConnectionId();
    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     * @return The toConnectionId.
     */
    int getToConnectionId();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_NoConnection}
   */
  public static final class CMsgSteamSockets_UDP_NoConnection extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_NoConnection)
      CMsgSteamSockets_UDP_NoConnectionOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_NoConnection.class.getName());
    }
    // Use CMsgSteamSockets_UDP_NoConnection.newBuilder() to construct.
    private CMsgSteamSockets_UDP_NoConnection(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_NoConnection() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.Builder.class);
    }

    private int bitField0_;
    public static final int FROM_CONNECTION_ID_FIELD_NUMBER = 2;
    private int fromConnectionId_ = 0;
    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     * @return Whether the fromConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasFromConnectionId() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional fixed32 from_connection_id = 2;</code>
     * @return The fromConnectionId.
     */
    @java.lang.Override
    public int getFromConnectionId() {
      return fromConnectionId_;
    }

    public static final int TO_CONNECTION_ID_FIELD_NUMBER = 3;
    private int toConnectionId_ = 0;
    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     * @return Whether the toConnectionId field is set.
     */
    @java.lang.Override
    public boolean hasToConnectionId() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional fixed32 to_connection_id = 3;</code>
     * @return The toConnectionId.
     */
    @java.lang.Override
    public int getToConnectionId() {
      return toConnectionId_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeFixed32(2, fromConnectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeFixed32(3, toConnectionId_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(2, fromConnectionId_);
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFixed32Size(3, toConnectionId_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection) obj;

      if (hasFromConnectionId() != other.hasFromConnectionId()) return false;
      if (hasFromConnectionId()) {
        if (getFromConnectionId()
            != other.getFromConnectionId()) return false;
      }
      if (hasToConnectionId() != other.hasToConnectionId()) return false;
      if (hasToConnectionId()) {
        if (getToConnectionId()
            != other.getToConnectionId()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasFromConnectionId()) {
        hash = (37 * hash) + FROM_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getFromConnectionId();
      }
      if (hasToConnectionId()) {
        hash = (37 * hash) + TO_CONNECTION_ID_FIELD_NUMBER;
        hash = (53 * hash) + getToConnectionId();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_NoConnection}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_NoConnection)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnectionOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.newBuilder()
      private Builder() {

      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);

      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        fromConnectionId_ = 0;
        toConnectionId_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.fromConnectionId_ = fromConnectionId_;
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.toConnectionId_ = toConnectionId_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection.getDefaultInstance()) return this;
        if (other.hasFromConnectionId()) {
          setFromConnectionId(other.getFromConnectionId());
        }
        if (other.hasToConnectionId()) {
          setToConnectionId(other.getToConnectionId());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 21: {
                fromConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000001;
                break;
              } // case 21
              case 29: {
                toConnectionId_ = input.readFixed32();
                bitField0_ |= 0x00000002;
                break;
              } // case 29
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private int fromConnectionId_ ;
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       * @return Whether the fromConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasFromConnectionId() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       * @return The fromConnectionId.
       */
      @java.lang.Override
      public int getFromConnectionId() {
        return fromConnectionId_;
      }
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       * @param value The fromConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setFromConnectionId(int value) {

        fromConnectionId_ = value;
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 from_connection_id = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFromConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        fromConnectionId_ = 0;
        onChanged();
        return this;
      }

      private int toConnectionId_ ;
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       * @return Whether the toConnectionId field is set.
       */
      @java.lang.Override
      public boolean hasToConnectionId() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       * @return The toConnectionId.
       */
      @java.lang.Override
      public int getToConnectionId() {
        return toConnectionId_;
      }
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       * @param value The toConnectionId to set.
       * @return This builder for chaining.
       */
      public Builder setToConnectionId(int value) {

        toConnectionId_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional fixed32 to_connection_id = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearToConnectionId() {
        bitField0_ = (bitField0_ & ~0x00000002);
        toConnectionId_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_NoConnection)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_NoConnection)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_NoConnection>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_NoConnection>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_NoConnection parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_NoConnection> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_NoConnection> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_NoConnection getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CMsgSteamSockets_UDP_StatsOrBuilder extends
      // @@protoc_insertion_point(interface_extends:dota2.CMsgSteamSockets_UDP_Stats)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
     * @return Whether the stats field is set.
     */
    boolean hasStats();
    /**
     * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
     * @return The stats.
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality getStats();
    /**
     * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQualityOrBuilder getStatsOrBuilder();

    /**
     * <code>optional uint32 flags = 3;</code>
     * @return Whether the flags field is set.
     */
    boolean hasFlags();
    /**
     * <code>optional uint32 flags = 3;</code>
     * @return The flags.
     */
    int getFlags();
  }
  /**
   * Protobuf type {@code dota2.CMsgSteamSockets_UDP_Stats}
   */
  public static final class CMsgSteamSockets_UDP_Stats extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:dota2.CMsgSteamSockets_UDP_Stats)
      CMsgSteamSockets_UDP_StatsOrBuilder {
  private static final long serialVersionUID = 0L;
    static {
      com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
        com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
        /* major= */ 4,
        /* minor= */ 28,
        /* patch= */ 2,
        /* suffix= */ "",
        CMsgSteamSockets_UDP_Stats.class.getName());
    }
    // Use CMsgSteamSockets_UDP_Stats.newBuilder() to construct.
    private CMsgSteamSockets_UDP_Stats(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
    }
    private CMsgSteamSockets_UDP_Stats() {
    }

    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_Stats_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_Stats_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.Builder.class);
    }

    /**
     * Protobuf enum {@code dota2.CMsgSteamSockets_UDP_Stats.Flags}
     */
    public enum Flags
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>ACK_REQUEST_E2E = 2;</code>
       */
      ACK_REQUEST_E2E(2),
      /**
       * <code>ACK_REQUEST_IMMEDIATE = 4;</code>
       */
      ACK_REQUEST_IMMEDIATE(4),
      /**
       * <code>NOT_PRIMARY_TRANSPORT_E2E = 16;</code>
       */
      NOT_PRIMARY_TRANSPORT_E2E(16),
      ;

      static {
        com.google.protobuf.RuntimeVersion.validateProtobufGencodeVersion(
          com.google.protobuf.RuntimeVersion.RuntimeDomain.PUBLIC,
          /* major= */ 4,
          /* minor= */ 28,
          /* patch= */ 2,
          /* suffix= */ "",
          Flags.class.getName());
      }
      /**
       * <code>ACK_REQUEST_E2E = 2;</code>
       */
      public static final int ACK_REQUEST_E2E_VALUE = 2;
      /**
       * <code>ACK_REQUEST_IMMEDIATE = 4;</code>
       */
      public static final int ACK_REQUEST_IMMEDIATE_VALUE = 4;
      /**
       * <code>NOT_PRIMARY_TRANSPORT_E2E = 16;</code>
       */
      public static final int NOT_PRIMARY_TRANSPORT_E2E_VALUE = 16;


      public final int getNumber() {
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static Flags valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static Flags forNumber(int value) {
        switch (value) {
          case 2: return ACK_REQUEST_E2E;
          case 4: return ACK_REQUEST_IMMEDIATE;
          case 16: return NOT_PRIMARY_TRANSPORT_E2E;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<Flags>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          Flags> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<Flags>() {
              public Flags findValueByNumber(int number) {
                return Flags.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.getDescriptor().getEnumTypes().get(0);
      }

      private static final Flags[] VALUES = values();

      public static Flags valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private Flags(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:dota2.CMsgSteamSockets_UDP_Stats.Flags)
    }

    private int bitField0_;
    public static final int STATS_FIELD_NUMBER = 1;
    private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality stats_;
    /**
     * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
     * @return Whether the stats field is set.
     */
    @java.lang.Override
    public boolean hasStats() {
      return ((bitField0_ & 0x00000001) != 0);
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
     * @return The stats.
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality getStats() {
      return stats_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
    }
    /**
     * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
     */
    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQualityOrBuilder getStatsOrBuilder() {
      return stats_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
    }

    public static final int FLAGS_FIELD_NUMBER = 3;
    private int flags_ = 0;
    /**
     * <code>optional uint32 flags = 3;</code>
     * @return Whether the flags field is set.
     */
    @java.lang.Override
    public boolean hasFlags() {
      return ((bitField0_ & 0x00000002) != 0);
    }
    /**
     * <code>optional uint32 flags = 3;</code>
     * @return The flags.
     */
    @java.lang.Override
    public int getFlags() {
      return flags_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (((bitField0_ & 0x00000001) != 0)) {
        output.writeMessage(1, getStats());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        output.writeUInt32(3, flags_);
      }
      getUnknownFields().writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getStats());
      }
      if (((bitField0_ & 0x00000002) != 0)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, flags_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats)) {
        return super.equals(obj);
      }
      com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats other = (com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats) obj;

      if (hasStats() != other.hasStats()) return false;
      if (hasStats()) {
        if (!getStats()
            .equals(other.getStats())) return false;
      }
      if (hasFlags() != other.hasFlags()) return false;
      if (hasFlags()) {
        if (getFlags()
            != other.getFlags()) return false;
      }
      if (!getUnknownFields().equals(other.getUnknownFields())) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasStats()) {
        hash = (37 * hash) + STATS_FIELD_NUMBER;
        hash = (53 * hash) + getStats().hashCode();
      }
      if (hasFlags()) {
        hash = (37 * hash) + FLAGS_FIELD_NUMBER;
        hash = (53 * hash) + getFlags();
      }
      hash = (29 * hash) + getUnknownFields().hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input);
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input);
    }
    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessage
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code dota2.CMsgSteamSockets_UDP_Stats}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:dota2.CMsgSteamSockets_UDP_Stats)
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_StatsOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_Stats_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_Stats_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.class, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.Builder.class);
      }

      // Construct using com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage
                .alwaysUseFieldBuilders) {
          getStatsFieldBuilder();
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        bitField0_ = 0;
        stats_ = null;
        if (statsBuilder_ != null) {
          statsBuilder_.dispose();
          statsBuilder_ = null;
        }
        flags_ = 0;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.internal_static_dota2_CMsgSteamSockets_UDP_Stats_descriptor;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats getDefaultInstanceForType() {
        return com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.getDefaultInstance();
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats build() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats buildPartial() {
        com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats result = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats(this);
        if (bitField0_ != 0) { buildPartial0(result); }
        onBuilt();
        return result;
      }

      private void buildPartial0(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats result) {
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) != 0)) {
          result.stats_ = statsBuilder_ == null
              ? stats_
              : statsBuilder_.build();
          to_bitField0_ |= 0x00000001;
        }
        if (((from_bitField0_ & 0x00000002) != 0)) {
          result.flags_ = flags_;
          to_bitField0_ |= 0x00000002;
        }
        result.bitField0_ |= to_bitField0_;
      }

      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats) {
          return mergeFrom((com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats other) {
        if (other == com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats.getDefaultInstance()) return this;
        if (other.hasStats()) {
          mergeStats(other.getStats());
        }
        if (other.hasFlags()) {
          setFlags(other.getFlags());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        if (extensionRegistry == null) {
          throw new java.lang.NullPointerException();
        }
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              case 10: {
                input.readMessage(
                    getStatsFieldBuilder().getBuilder(),
                    extensionRegistry);
                bitField0_ |= 0x00000001;
                break;
              } // case 10
              case 24: {
                flags_ = input.readUInt32();
                bitField0_ |= 0x00000002;
                break;
              } // case 24
              default: {
                if (!super.parseUnknownField(input, extensionRegistry, tag)) {
                  done = true; // was an endgroup tag
                }
                break;
              } // default:
            } // switch (tag)
          } // while (!done)
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.unwrapIOException();
        } finally {
          onChanged();
        } // finally
        return this;
      }
      private int bitField0_;

      private com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality stats_;
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQualityOrBuilder> statsBuilder_;
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       * @return Whether the stats field is set.
       */
      public boolean hasStats() {
        return ((bitField0_ & 0x00000001) != 0);
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       * @return The stats.
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality getStats() {
        if (statsBuilder_ == null) {
          return stats_ == null ? com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
        } else {
          return statsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder setStats(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality value) {
        if (statsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          stats_ = value;
        } else {
          statsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder setStats(
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.Builder builderForValue) {
        if (statsBuilder_ == null) {
          stats_ = builderForValue.build();
        } else {
          statsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder mergeStats(com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality value) {
        if (statsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) != 0) &&
            stats_ != null &&
            stats_ != com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.getDefaultInstance()) {
            getStatsBuilder().mergeFrom(value);
          } else {
            stats_ = value;
          }
        } else {
          statsBuilder_.mergeFrom(value);
        }
        if (stats_ != null) {
          bitField0_ |= 0x00000001;
          onChanged();
        }
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public Builder clearStats() {
        bitField0_ = (bitField0_ & ~0x00000001);
        stats_ = null;
        if (statsBuilder_ != null) {
          statsBuilder_.dispose();
          statsBuilder_ = null;
        }
        onChanged();
        return this;
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.Builder getStatsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStatsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQualityOrBuilder getStatsOrBuilder() {
        if (statsBuilder_ != null) {
          return statsBuilder_.getMessageOrBuilder();
        } else {
          return stats_ == null ?
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.getDefaultInstance() : stats_;
        }
      }
      /**
       * <code>optional .dota2.CMsgSteamDatagramConnectionQuality stats = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQualityOrBuilder> 
          getStatsFieldBuilder() {
        if (statsBuilder_ == null) {
          statsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQuality.Builder, com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.CMsgSteamDatagramConnectionQualityOrBuilder>(
                  getStats(),
                  getParentForChildren(),
                  isClean());
          stats_ = null;
        }
        return statsBuilder_;
      }

      private int flags_ ;
      /**
       * <code>optional uint32 flags = 3;</code>
       * @return Whether the flags field is set.
       */
      @java.lang.Override
      public boolean hasFlags() {
        return ((bitField0_ & 0x00000002) != 0);
      }
      /**
       * <code>optional uint32 flags = 3;</code>
       * @return The flags.
       */
      @java.lang.Override
      public int getFlags() {
        return flags_;
      }
      /**
       * <code>optional uint32 flags = 3;</code>
       * @param value The flags to set.
       * @return This builder for chaining.
       */
      public Builder setFlags(int value) {

        flags_ = value;
        bitField0_ |= 0x00000002;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 flags = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearFlags() {
        bitField0_ = (bitField0_ & ~0x00000002);
        flags_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:dota2.CMsgSteamSockets_UDP_Stats)
    }

    // @@protoc_insertion_point(class_scope:dota2.CMsgSteamSockets_UDP_Stats)
    private static final com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats();
    }

    public static com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CMsgSteamSockets_UDP_Stats>
        PARSER = new com.google.protobuf.AbstractParser<CMsgSteamSockets_UDP_Stats>() {
      @java.lang.Override
      public CMsgSteamSockets_UDP_Stats parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        Builder builder = newBuilder();
        try {
          builder.mergeFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(builder.buildPartial());
        } catch (com.google.protobuf.UninitializedMessageException e) {
          throw e.asInvalidProtocolBufferException().setUnfinishedMessage(builder.buildPartial());
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(e)
              .setUnfinishedMessage(builder.buildPartial());
        }
        return builder.buildPartial();
      }
    };

    public static com.google.protobuf.Parser<CMsgSteamSockets_UDP_Stats> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CMsgSteamSockets_UDP_Stats> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsUDP.CMsgSteamSockets_UDP_Stats getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_dota2_CMsgSteamSockets_UDP_Stats_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_dota2_CMsgSteamSockets_UDP_Stats_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n)steamnetworkingsockets_messages_udp.pr" +
      "oto\022\005dota2\032+steamnetworkingsockets_messa" +
      "ges_certs.proto\032%steamnetworkingsockets_" +
      "messages.proto\"n\n%CMsgSteamSockets_UDP_C" +
      "hallengeRequest\022\025\n\rconnection_id\030\001 \001(\007\022\024" +
      "\n\014my_timestamp\030\003 \001(\006\022\030\n\020protocol_version" +
      "\030\004 \001(\r\"\201\001\n#CMsgSteamSockets_UDP_Challeng" +
      "eReply\022\025\n\rconnection_id\030\001 \001(\007\022\021\n\tchallen" +
      "ge\030\002 \001(\006\022\026\n\016your_timestamp\030\003 \001(\006\022\030\n\020prot" +
      "ocol_version\030\004 \001(\r\"\243\003\n#CMsgSteamSockets_" +
      "UDP_ConnectRequest\022\034\n\024client_connection_" +
      "id\030\001 \001(\007\022\021\n\tchallenge\030\002 \001(\006\022\024\n\014my_timest" +
      "amp\030\005 \001(\006\022\023\n\013ping_est_ms\030\006 \001(\r\022=\n\005crypt\030" +
      "\007 \001(\0132..dota2.CMsgSteamDatagramSessionCr" +
      "yptInfoSigned\0227\n\004cert\030\004 \001(\0132).dota2.CMsg" +
      "SteamDatagramCertificateSigned\022\037\n\027legacy" +
      "_protocol_version\030\010 \001(\r\022\027\n\017identity_stri" +
      "ng\030\n \001(\t\022\036\n\026legacy_client_steam_id\030\003 \001(\006" +
      "\022N\n\026legacy_identity_binary\030\t \001(\0132..dota2" +
      ".CMsgSteamNetworkingIdentityLegacyBinary" +
      "\"\216\003\n\036CMsgSteamSockets_UDP_ConnectOK\022\034\n\024c" +
      "lient_connection_id\030\001 \001(\007\022\034\n\024server_conn" +
      "ection_id\030\005 \001(\007\022\026\n\016your_timestamp\030\003 \001(\006\022" +
      "\027\n\017delay_time_usec\030\004 \001(\r\022=\n\005crypt\030\007 \001(\0132" +
      "..dota2.CMsgSteamDatagramSessionCryptInf" +
      "oSigned\0227\n\004cert\030\010 \001(\0132).dota2.CMsgSteamD" +
      "atagramCertificateSigned\022\027\n\017identity_str" +
      "ing\030\013 \001(\t\022\036\n\026legacy_server_steam_id\030\002 \001(" +
      "\006\022N\n\026legacy_identity_binary\030\n \001(\0132..dota" +
      "2.CMsgSteamNetworkingIdentityLegacyBinar" +
      "y\"\201\001\n%CMsgSteamSockets_UDP_ConnectionClo" +
      "sed\022\030\n\020to_connection_id\030\004 \001(\007\022\032\n\022from_co" +
      "nnection_id\030\005 \001(\007\022\r\n\005debug\030\002 \001(\t\022\023\n\013reas" +
      "on_code\030\003 \001(\r\"Y\n!CMsgSteamSockets_UDP_No" +
      "Connection\022\032\n\022from_connection_id\030\002 \001(\007\022\030" +
      "\n\020to_connection_id\030\003 \001(\007\"\275\001\n\032CMsgSteamSo" +
      "ckets_UDP_Stats\0228\n\005stats\030\001 \001(\0132).dota2.C" +
      "MsgSteamDatagramConnectionQuality\022\r\n\005fla" +
      "gs\030\003 \001(\r\"V\n\005Flags\022\023\n\017ACK_REQUEST_E2E\020\002\022\031" +
      "\n\025ACK_REQUEST_IMMEDIATE\020\004\022\035\n\031NOT_PRIMARY" +
      "_TRANSPORT_E2E\020\020*\245\002\n\030ESteamNetworkingUDP" +
      "MsgID\022-\n)k_ESteamNetworkingUDPMsg_Challe" +
      "ngeRequest\020 \022+\n\'k_ESteamNetworkingUDPMsg" +
      "_ChallengeReply\020!\022+\n\'k_ESteamNetworkingU" +
      "DPMsg_ConnectRequest\020\"\022&\n\"k_ESteamNetwor" +
      "kingUDPMsg_ConnectOK\020#\022-\n)k_ESteamNetwor" +
      "kingUDPMsg_ConnectionClosed\020$\022)\n%k_EStea" +
      "mNetworkingUDPMsg_NoConnection\020%BB\n\035com." +
      "nickbooher.protos.gc.dotaB\034MsgSteamNetwo" +
      "rkingSocketsUDPH\001\200\001\000"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.getDescriptor(),
          com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.getDescriptor(),
        });
    internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_ChallengeRequest_descriptor,
        new java.lang.String[] { "ConnectionId", "MyTimestamp", "ProtocolVersion", });
    internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_ChallengeReply_descriptor,
        new java.lang.String[] { "ConnectionId", "Challenge", "YourTimestamp", "ProtocolVersion", });
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_ConnectRequest_descriptor,
        new java.lang.String[] { "ClientConnectionId", "Challenge", "MyTimestamp", "PingEstMs", "Crypt", "Cert", "LegacyProtocolVersion", "IdentityString", "LegacyClientSteamId", "LegacyIdentityBinary", });
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_ConnectOK_descriptor,
        new java.lang.String[] { "ClientConnectionId", "ServerConnectionId", "YourTimestamp", "DelayTimeUsec", "Crypt", "Cert", "IdentityString", "LegacyServerSteamId", "LegacyIdentityBinary", });
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_ConnectionClosed_descriptor,
        new java.lang.String[] { "ToConnectionId", "FromConnectionId", "Debug", "ReasonCode", });
    internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_NoConnection_descriptor,
        new java.lang.String[] { "FromConnectionId", "ToConnectionId", });
    internal_static_dota2_CMsgSteamSockets_UDP_Stats_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_dota2_CMsgSteamSockets_UDP_Stats_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_dota2_CMsgSteamSockets_UDP_Stats_descriptor,
        new java.lang.String[] { "Stats", "Flags", });
    descriptor.resolveAllFeaturesImmutable();
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSocketsCerts.getDescriptor();
    com.nickbooher.protos.gc.dota.MsgSteamNetworkingSockets.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
